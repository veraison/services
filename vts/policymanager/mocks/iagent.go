// Code generated by MockGen. DO NOT EDIT.
// Source: ../../policy/iagent.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	viper "github.com/spf13/viper"
	ear "github.com/veraison/ear"
	policy "github.com/veraison/services/policy"
	proto "github.com/veraison/services/proto"
)

// MockIAgent is a mock of IAgent interface.
type MockIAgent struct {
	ctrl     *gomock.Controller
	recorder *MockIAgentMockRecorder
}

// MockIAgentMockRecorder is the mock recorder for MockIAgent.
type MockIAgentMockRecorder struct {
	mock *MockIAgent
}

// NewMockIAgent creates a new mock instance.
func NewMockIAgent(ctrl *gomock.Controller) *MockIAgent {
	mock := &MockIAgent{ctrl: ctrl}
	mock.recorder = &MockIAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAgent) EXPECT() *MockIAgentMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIAgent) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIAgentMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIAgent)(nil).Close))
}

// Evaluate mocks base method.
func (m *MockIAgent) Evaluate(ctx context.Context, scheme string, policy *policy.Policy, submod string, appraisal *ear.Appraisal, evidence *proto.EvidenceContext, endorsements []string) (*ear.Appraisal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evaluate", ctx, scheme, policy, submod, appraisal, evidence, endorsements)
	ret0, _ := ret[0].(*ear.Appraisal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate.
func (mr *MockIAgentMockRecorder) Evaluate(ctx, scheme, policy, submod, appraisal, evidence, endorsements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockIAgent)(nil).Evaluate), ctx, scheme, policy, submod, appraisal, evidence, endorsements)
}

// GetBackendName mocks base method.
func (m *MockIAgent) GetBackendName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBackendName indicates an expected call of GetBackendName.
func (mr *MockIAgentMockRecorder) GetBackendName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendName", reflect.TypeOf((*MockIAgent)(nil).GetBackendName))
}

// Init mocks base method.
func (m *MockIAgent) Init(v *viper.Viper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIAgentMockRecorder) Init(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIAgent)(nil).Init), v)
}

// Validate mocks base method.
func (m *MockIAgent) Validate(ctx context.Context, policyRules string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, policyRules)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIAgentMockRecorder) Validate(ctx, policyRules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIAgent)(nil).Validate), ctx, policyRules)
}
