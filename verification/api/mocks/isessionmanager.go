// Code generated by MockGen. DO NOT EDIT.
// Source: ../sessionmanager/isessionmanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	json "encoding/json"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	sessionmanager "github.com/veraison/services/verification/sessionmanager"
)

// MockISessionManager is a mock of ISessionManager interface.
type MockISessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockISessionManagerMockRecorder
}

// MockISessionManagerMockRecorder is the mock recorder for MockISessionManager.
type MockISessionManagerMockRecorder struct {
	mock *MockISessionManager
}

// NewMockISessionManager creates a new mock instance.
func NewMockISessionManager(ctrl *gomock.Controller) *MockISessionManager {
	mock := &MockISessionManager{ctrl: ctrl}
	mock.recorder = &MockISessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionManager) EXPECT() *MockISessionManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockISessionManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISessionManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISessionManager)(nil).Close))
}

// DelSession mocks base method.
func (m *MockISessionManager) DelSession(id uuid.UUID, tenant string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelSession", id, tenant)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelSession indicates an expected call of DelSession.
func (mr *MockISessionManagerMockRecorder) DelSession(id, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSession", reflect.TypeOf((*MockISessionManager)(nil).DelSession), id, tenant)
}

// GetSession mocks base method.
func (m *MockISessionManager) GetSession(id uuid.UUID, tenant string) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", id, tenant)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockISessionManagerMockRecorder) GetSession(id, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockISessionManager)(nil).GetSession), id, tenant)
}

// Init mocks base method.
func (m *MockISessionManager) Init(cfg sessionmanager.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockISessionManagerMockRecorder) Init(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISessionManager)(nil).Init), cfg)
}

// SetSession mocks base method.
func (m *MockISessionManager) SetSession(id uuid.UUID, tenant string, session json.RawMessage, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", id, tenant, session, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockISessionManagerMockRecorder) SetSession(id, tenant, session, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockISessionManager)(nil).SetSession), id, tenant, session, ttl)
}
