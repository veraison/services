// Code generated by MockGen. DO NOT EDIT.
// Source: ../verifier/iverifier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVerifier is a mock of IVerifier interface.
type MockIVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockIVerifierMockRecorder
}

// MockIVerifierMockRecorder is the mock recorder for MockIVerifier.
type MockIVerifierMockRecorder struct {
	mock *MockIVerifier
}

// NewMockIVerifier creates a new mock instance.
func NewMockIVerifier(ctrl *gomock.Controller) *MockIVerifier {
	mock := &MockIVerifier{ctrl: ctrl}
	mock.recorder = &MockIVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVerifier) EXPECT() *MockIVerifierMockRecorder {
	return m.recorder
}

// IsSupportedMediaType mocks base method.
func (m *MockIVerifier) IsSupportedMediaType(mt string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupportedMediaType", mt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupportedMediaType indicates an expected call of IsSupportedMediaType.
func (mr *MockIVerifierMockRecorder) IsSupportedMediaType(mt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupportedMediaType", reflect.TypeOf((*MockIVerifier)(nil).IsSupportedMediaType), mt)
}

// ProcessEvidence mocks base method.
func (m *MockIVerifier) ProcessEvidence(data []byte, mt string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvidence", data, mt)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEvidence indicates an expected call of ProcessEvidence.
func (mr *MockIVerifierMockRecorder) ProcessEvidence(data, mt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvidence", reflect.TypeOf((*MockIVerifier)(nil).ProcessEvidence), data, mt)
}

// SupportedMediaTypes mocks base method.
func (m *MockIVerifier) SupportedMediaTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedMediaTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SupportedMediaTypes indicates an expected call of SupportedMediaTypes.
func (mr *MockIVerifierMockRecorder) SupportedMediaTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedMediaTypes", reflect.TypeOf((*MockIVerifier)(nil).SupportedMediaTypes))
}
