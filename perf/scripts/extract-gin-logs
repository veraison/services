#!/usr/bin/env python
# Copyright 2023 Contributors to the Veraison project.
# SPDX-License-Identifier: Apache-2.0
import csv
import logging
from datetime import datetime, timedelta
from typing import Iterable, Generator

class GinRequestLog:

    def __init__(self, timestamp=None, status=None, time=None, method=None, source=None, path=None):
        self.timestamp = timestamp
        self.status = status
        self.time = time
        self.method = method
        self.source = source
        self.path = path

    def __str__(self):
        time = self.time.total_seconds() * 1000
        return f'{self.status} ({time:.3f} ms) [{self.method} {self.path}]'


def extract_gin_request_logs(path: str) -> Generator[GinRequestLog, None, None]:
    with open(path) as fh:
        for i, line in enumerate(fh):
            try:
                parts = line.split('[GIN] ', 1)
                if len(parts) != 2:
                    continue

                fields = [f.strip() for f in parts[1].split('|')]
                method, path_string = [f.strip() for f in fields[4].split()]

                yield GinRequestLog(
                    timestamp=datetime.strptime(fields[0], '%Y/%m/%d - %H:%M:%S'),
                    status=int(fields[1]),
                    time=_parse_duration(fields[2]),
                    source=fields[3],
                    method=method,
                    path=path_string[1:-1],  # strip quotes
                )
            except Exception as e:
                logging.error(f'Line {i}: {e}')


def generate_rows(request_logs: Iterable[GinRequestLog]):
    for rl in request_logs:
        err = False
        if rl.status < 200 or rl.status >= 300:
            err = True

        yield ([
            rl.method,
            rl.path,
            rl.time.total_seconds() * 1000,
        ], err)


def _parse_duration(text: str) -> timedelta:
    if text.endswith('Âµs'):
       value = float(text[:-2])
       return timedelta(microseconds=value)
    if text.endswith('ns'):
       value = float(text[:-2])
       return timedelta(microseconds=value*1000)
    elif text.endswith('ms'):
       value = float(text[:-2])
       return timedelta(milliseconds=value)
    elif text.endswith('s'):
       value = float(text[:-1])
       return timedelta(milliseconds=value)
    else:
        raise ValueError(f'Unexpected duration: {text}')


if __name__ == '__main__':
    import sys
    import os

    err_count = 0

    with open(sys.argv[2], 'w') as wfh:
        writer = csv.writer(wfh)
        writer.writerow(['method', 'path', 'time'])

        for row, err in generate_rows(extract_gin_request_logs(sys.argv[1])):
            if err:
                err_count += 1
            else:
                writer.writerow(row)

    file = os.path.basename(sys.argv[2])
