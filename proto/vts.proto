syntax = "proto3";
package proto;

import "appraisal_context.proto";
import "endorsement_query.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "state.proto";
import "status.proto";
import "token.proto";

option go_package = "github.com/veraison/services/proto";

message Evidence {
  google.protobuf.Struct value = 1;
}

message SubmitEndorsementsRequest {
  string media_type =1;
  bytes data  = 2;
}

message SubmitEndorsementsResponse {
  Status status = 1;
}

message MediaTypeList {
  repeated string media_types = 1;
}

message PublicKey {
  string key = 1;
}

// Client interface for the Veraison Trusted Services component.
// protolint:disable MAX_LINE_LENGTH
service VTS {
  // Return the summary state of the service.
  rpc GetServiceState(google.protobuf.Empty) returns (ServiceState);

  // Returns attestation information -- evidences, endorsed claims, trust
  // vector, etc -- for the provided attestation token data.
  rpc GetAttestation(AttestationToken) returns (AppraisalContext);
  rpc GetSupportedVerificationMediaTypes(google.protobuf.Empty) returns (MediaTypeList);

  rpc GetSupportedProvisioningMediaTypes(google.protobuf.Empty) returns (MediaTypeList);
  rpc SubmitEndorsements(SubmitEndorsementsRequest) returns (SubmitEndorsementsResponse);

  // Returns the public key used to sign evidence.
  rpc GetEARSigningPublicKey(google.protobuf.Empty) returns (PublicKey);

  // endorsement distribution API
  rpc GetEndorsements(EndorsementQueryIn) returns (EndorsementQueryOut);
  rpc GetSupportedCoservMediaTypes(google.protobuf.Empty) returns (MediaTypeList);
  // Returns the public key used to sign CoSERV results
  rpc GetCoservSigningPublicKey(google.protobuf.Empty) returns (PublicKey);
}
