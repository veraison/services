syntax = "proto3";
package proto;

import "appraisal_context.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "state.proto";
import "token.proto";

option go_package = "github.com/veraison/services/proto";

message Status {
  bool result = 1;
  string error_detail = 2;
}

message Evidence {
  google.protobuf.Struct value = 1;
}

message SubmitEndorsementsRequest {
  string media_type =1;
  bytes data  = 2;
}

message SubmitEndorsementsResponse {
  Status status = 1;
}

message MediaTypeList {
  repeated string media_types = 1;
}

message PublicKey {
  string key = 1;
}

message GetEndorsementsRequest {
  // Optional key prefix to filter endorsements. If empty, returns all endorsements.
  string key_prefix = 1;
  // Type of endorsement to retrieve: "trust-anchor", "reference-value", or "all"
  string endorsement_type = 2;
}

message EndorsementEntry {
  string key = 1;
  repeated string values = 2;
}

message GetEndorsementsResponse {
  repeated EndorsementEntry endorsements = 1;
  Status status = 2;
}

message DeleteEndorsementsRequest {
  // Key or key prefix to delete
  string key = 1;
  // Type of endorsement to delete: "trust-anchor", "reference-value", or "all"
  string endorsement_type = 2;
}

message DeleteEndorsementsResponse {
  int32 deleted_count = 1;
  Status status = 2;
}

// Client interface for the Veraison Trusted Services component.
// protolint:disable MAX_LINE_LENGTH
service VTS {
  // Return the summary state of the service.
  rpc GetServiceState(google.protobuf.Empty) returns (ServiceState);

  // Returns attestation information -- evidences, endorsed claims, trust
  // vector, etc -- for the provided attestation token data.
  rpc GetAttestation(AttestationToken) returns (AppraisalContext);
  rpc GetSupportedVerificationMediaTypes(google.protobuf.Empty) returns (MediaTypeList);

  rpc GetSupportedProvisioningMediaTypes(google.protobuf.Empty) returns (MediaTypeList);
  rpc SubmitEndorsements(SubmitEndorsementsRequest) returns (SubmitEndorsementsResponse);

  // Returns endorsements (trust anchors and/or reference values) based on the provided filter
  rpc GetEndorsements(GetEndorsementsRequest) returns (GetEndorsementsResponse);

  // Deletes endorsements (trust anchors and/or reference values) based on the provided key
  rpc DeleteEndorsements(DeleteEndorsementsRequest) returns (DeleteEndorsementsResponse);

  // Returns the public key used to sign evidence.
  rpc GetEARSigningPublicKey(google.protobuf.Empty) returns (PublicKey);
}

