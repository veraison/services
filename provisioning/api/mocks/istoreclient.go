// Code generated by MockGen. DO NOT EDIT.
// Source: ../storeclient/istoreclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/veraison/services/proto"
	grpc "google.golang.org/grpc"
)

// MockIStoreClient is a mock of IStoreClient interface.
type MockIStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreClientMockRecorder
}

// MockIStoreClientMockRecorder is the mock recorder for MockIStoreClient.
type MockIStoreClientMockRecorder struct {
	mock *MockIStoreClient
}

// NewMockIStoreClient creates a new mock instance.
func NewMockIStoreClient(ctrl *gomock.Controller) *MockIStoreClient {
	mock := &MockIStoreClient{ctrl: ctrl}
	mock.recorder = &MockIStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStoreClient) EXPECT() *MockIStoreClientMockRecorder {
	return m.recorder
}

// AddSwComponents mocks base method.
func (m *MockIStoreClient) AddSwComponents(ctx context.Context, in *proto.AddSwComponentsRequest, opts ...grpc.CallOption) (*proto.AddSwComponentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSwComponents", varargs...)
	ret0, _ := ret[0].(*proto.AddSwComponentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSwComponents indicates an expected call of AddSwComponents.
func (mr *MockIStoreClientMockRecorder) AddSwComponents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSwComponents", reflect.TypeOf((*MockIStoreClient)(nil).AddSwComponents), varargs...)
}

// AddTrustAnchor mocks base method.
func (m *MockIStoreClient) AddTrustAnchor(ctx context.Context, in *proto.AddTrustAnchorRequest, opts ...grpc.CallOption) (*proto.AddTrustAnchorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTrustAnchor", varargs...)
	ret0, _ := ret[0].(*proto.AddTrustAnchorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrustAnchor indicates an expected call of AddTrustAnchor.
func (mr *MockIStoreClientMockRecorder) AddTrustAnchor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustAnchor", reflect.TypeOf((*MockIStoreClient)(nil).AddTrustAnchor), varargs...)
}

// GetAttestation mocks base method.
func (m *MockIStoreClient) GetAttestation(ctx context.Context, in *proto.AttestationToken, opts ...grpc.CallOption) (*proto.Attestation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttestation", varargs...)
	ret0, _ := ret[0].(*proto.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestation indicates an expected call of GetAttestation.
func (mr *MockIStoreClientMockRecorder) GetAttestation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestation", reflect.TypeOf((*MockIStoreClient)(nil).GetAttestation), varargs...)
}
