// Code generated by MockGen. DO NOT EDIT.
// Source: ../provisioner/iprovisioner.go
// Copyright 2022-2025 Contributors to the Veraison project.
// SPDX-License-Identifier: Apache-2.0

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/veraison/services/proto"
)

// MockIProvisioner is a mock of IProvisioner interface.
type MockIProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockIProvisionerMockRecorder
}

// MockIProvisionerMockRecorder is the mock recorder for MockIProvisioner.
type MockIProvisionerMockRecorder struct {
	mock *MockIProvisioner
}

// NewMockIProvisioner creates a new mock instance.
func NewMockIProvisioner(ctrl *gomock.Controller) *MockIProvisioner {
	mock := &MockIProvisioner{ctrl: ctrl}
	mock.recorder = &MockIProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvisioner) EXPECT() *MockIProvisionerMockRecorder {
	return m.recorder
}

// GetVTSState mocks base method.
func (m *MockIProvisioner) GetVTSState() (*proto.ServiceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVTSState")
	ret0, _ := ret[0].(*proto.ServiceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVTSState indicates an expected call of GetVTSState.
func (mr *MockIProvisionerMockRecorder) GetVTSState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVTSState", reflect.TypeOf((*MockIProvisioner)(nil).GetVTSState))
}

// IsSupportedMediaType mocks base method.
func (m *MockIProvisioner) IsSupportedMediaType(mt string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupportedMediaType", mt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSupportedMediaType indicates an expected call of IsSupportedMediaType.
func (mr *MockIProvisionerMockRecorder) IsSupportedMediaType(mt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupportedMediaType", reflect.TypeOf((*MockIProvisioner)(nil).IsSupportedMediaType), mt)
}

// SubmitEndorsements mocks base method.
func (m *MockIProvisioner) SubmitEndorsements(tenantID string, data []byte, mt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEndorsements", tenantID, data, mt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitEndorsements indicates an expected call of SubmitEndorsements.
func (mr *MockIProvisionerMockRecorder) SubmitEndorsements(tenantID, data, mt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEndorsements", reflect.TypeOf((*MockIProvisioner)(nil).SubmitEndorsements), tenantID, data, mt)
}

// SupportedMediaTypes mocks base method.
func (m *MockIProvisioner) SupportedMediaTypes() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedMediaTypes")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedMediaTypes indicates an expected call of SupportedMediaTypes.
func (mr *MockIProvisionerMockRecorder) SupportedMediaTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedMediaTypes", reflect.TypeOf((*MockIProvisioner)(nil).SupportedMediaTypes))
}

// GetEndorsements mocks base method.
func (m *MockIProvisioner) GetEndorsements(keyPrefix string, endorsementType string) (*proto.GetEndorsementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndorsements", keyPrefix, endorsementType)
	ret0, _ := ret[0].(*proto.GetEndorsementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndorsements indicates an expected call of GetEndorsements.
func (mr *MockIProvisionerMockRecorder) GetEndorsements(keyPrefix, endorsementType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndorsements", reflect.TypeOf((*MockIProvisioner)(nil).GetEndorsements), keyPrefix, endorsementType)
}

// DeleteEndorsements mocks base method.
func (m *MockIProvisioner) DeleteEndorsements(key string, endorsementType string) (*proto.DeleteEndorsementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndorsements", key, endorsementType)
	ret0, _ := ret[0].(*proto.DeleteEndorsementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndorsements indicates an expected call of DeleteEndorsements.
func (mr *MockIProvisionerMockRecorder) DeleteEndorsements(key, endorsementType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndorsements", reflect.TypeOf((*MockIProvisioner)(nil).DeleteEndorsements), key, endorsementType)
}
