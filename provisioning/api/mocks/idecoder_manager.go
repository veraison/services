// Code generated by MockGen. DO NOT EDIT.
// Source: ../decoder/idecoder_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decoder "github.com/veraison/services/provisioning/decoder"
)

// MockIDecoderManager is a mock of IDecoderManager interface.
type MockIDecoderManager struct {
	ctrl     *gomock.Controller
	recorder *MockIDecoderManagerMockRecorder
}

// MockIDecoderManagerMockRecorder is the mock recorder for MockIDecoderManager.
type MockIDecoderManagerMockRecorder struct {
	mock *MockIDecoderManager
}

// NewMockIDecoderManager creates a new mock instance.
func NewMockIDecoderManager(ctrl *gomock.Controller) *MockIDecoderManager {
	mock := &MockIDecoderManager{ctrl: ctrl}
	mock.recorder = &MockIDecoderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDecoderManager) EXPECT() *MockIDecoderManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDecoderManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIDecoderManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDecoderManager)(nil).Close))
}

// Dispatch mocks base method.
func (m *MockIDecoderManager) Dispatch(mediaType string, data []byte) (*decoder.EndorsementDecoderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", mediaType, data)
	ret0, _ := ret[0].(*decoder.EndorsementDecoderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockIDecoderManagerMockRecorder) Dispatch(mediaType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockIDecoderManager)(nil).Dispatch), mediaType, data)
}

// Init mocks base method.
func (m *MockIDecoderManager) Init(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIDecoderManagerMockRecorder) Init(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIDecoderManager)(nil).Init), dir)
}

// IsSupportedMediaType mocks base method.
func (m *MockIDecoderManager) IsSupportedMediaType(mediaType string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupportedMediaType", mediaType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupportedMediaType indicates an expected call of IsSupportedMediaType.
func (mr *MockIDecoderManagerMockRecorder) IsSupportedMediaType(mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupportedMediaType", reflect.TypeOf((*MockIDecoderManager)(nil).IsSupportedMediaType), mediaType)
}

// SupportedMediaTypes mocks base method.
func (m *MockIDecoderManager) SupportedMediaTypes() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedMediaTypes")
	ret0, _ := ret[0].(string)
	return ret0
}

// SupportedMediaTypes indicates an expected call of SupportedMediaTypes.
func (mr *MockIDecoderManagerMockRecorder) SupportedMediaTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedMediaTypes", reflect.TypeOf((*MockIDecoderManager)(nil).SupportedMediaTypes))
}
