// Code generated by MockGen. DO NOT EDIT.
// Source: ../../plugin/imanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	plugin "github.com/veraison/services/plugin"
)

// MockIManager is a mock of IManager interface.
type MockIManager[I plugin.IPluggable] struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerMockRecorder[I]
}

// MockIManagerMockRecorder is the mock recorder for MockIManager.
type MockIManagerMockRecorder[I plugin.IPluggable] struct {
	mock *MockIManager[I]
}

// NewMockIManager creates a new mock instance.
func NewMockIManager[I plugin.IPluggable](ctrl *gomock.Controller) *MockIManager[I] {
	mock := &MockIManager[I]{ctrl: ctrl}
	mock.recorder = &MockIManagerMockRecorder[I]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManager[I]) EXPECT() *MockIManagerMockRecorder[I] {
	return m.recorder
}

// Close mocks base method.
func (m *MockIManager[I]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIManagerMockRecorder[I]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIManager[I])(nil).Close))
}

// GetRegisteredAttestationSchemes mocks base method.
func (m *MockIManager[I]) GetRegisteredAttestationSchemes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredAttestationSchemes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRegisteredAttestationSchemes indicates an expected call of GetRegisteredAttestationSchemes.
func (mr *MockIManagerMockRecorder[I]) GetRegisteredAttestationSchemes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredAttestationSchemes", reflect.TypeOf((*MockIManager[I])(nil).GetRegisteredAttestationSchemes))
}

// GetRegisteredMediaTypes mocks base method.
func (m *MockIManager[I]) GetRegisteredMediaTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredMediaTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRegisteredMediaTypes indicates an expected call of GetRegisteredMediaTypes.
func (mr *MockIManagerMockRecorder[I]) GetRegisteredMediaTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMediaTypes", reflect.TypeOf((*MockIManager[I])(nil).GetRegisteredMediaTypes))
}

// Init mocks base method.
func (m *MockIManager[I]) Init(name string, ch *plugin.RPCChannel[I]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", name, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIManagerMockRecorder[I]) Init(name, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIManager[I])(nil).Init), name, ch)
}

// IsRegisteredMediaType mocks base method.
func (m *MockIManager[I]) IsRegisteredMediaType(mediaType string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRegisteredMediaType", mediaType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRegisteredMediaType indicates an expected call of IsRegisteredMediaType.
func (mr *MockIManagerMockRecorder[I]) IsRegisteredMediaType(mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRegisteredMediaType", reflect.TypeOf((*MockIManager[I])(nil).IsRegisteredMediaType), mediaType)
}

// LookupByAttestationScheme mocks base method.
func (m *MockIManager[I]) LookupByAttestationScheme(name string) (I, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByAttestationScheme", name)
	ret0, _ := ret[0].(I)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupByAttestationScheme indicates an expected call of LookupByAttestationScheme.
func (mr *MockIManagerMockRecorder[I]) LookupByAttestationScheme(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByAttestationScheme", reflect.TypeOf((*MockIManager[I])(nil).LookupByAttestationScheme), name)
}

// LookupByMediaType mocks base method.
func (m *MockIManager[I]) LookupByMediaType(mediaType string) (I, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByMediaType", mediaType)
	ret0, _ := ret[0].(I)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupByMediaType indicates an expected call of LookupByMediaType.
func (mr *MockIManagerMockRecorder[I]) LookupByMediaType(mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByMediaType", reflect.TypeOf((*MockIManager[I])(nil).LookupByMediaType), mediaType)
}

// LookupByName mocks base method.
func (m *MockIManager[I]) LookupByName(name string) (I, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByName", name)
	ret0, _ := ret[0].(I)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupByName indicates an expected call of LookupByName.
func (mr *MockIManagerMockRecorder[I]) LookupByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByName", reflect.TypeOf((*MockIManager[I])(nil).LookupByName), name)
}
